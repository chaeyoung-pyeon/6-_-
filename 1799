N = int(input())
board = [list(map(int, input().split())) for _ in range(N)]

# ↘ ↙ 대각선 체크를 위한 배열
diag1 = [0] * (2 * N)
diag2 = [0] * (2 * N)

# 흑/백 칸 나누기
white_positions = []
black_positions = []

for i in range(N):
    for j in range(N):
        if board[i][j] == 1:
            if (i + j) % 2 == 0:
                black_positions.append((i, j))
            else:
                white_positions.append((i, j))

def dfs(pos_list, index, count):
    if index == len(pos_list):
        return count

    max_count = dfs(pos_list, index + 1, count)  # 현재 위치에 놓지 않는 경우

    x, y = pos_list[index]
    d1 = x + y
    d2 = x - y + N

    if not diag1[d1] and not diag2[d2]:
        diag1[d1] = diag2[d2] = 1
        max_count = max(max_count, dfs(pos_list, index + 1, count + 1))
        diag1[d1] = diag2[d2] = 0

    return max_count

# 각각 최대 비숍 수 계산
black_max = dfs(black_positions, 0, 0)
white_max = dfs(white_positions, 0, 0)

print(black_max + white_max)
